trigger:
- master

jobs:
- job:
  displayName: Windows
  pool:
    vmImage: 'vs2017-win2016'

  strategy:
    matrix:
      64-bit Debug:
        BuildType: Debug
        CMakeArgs: '"Visual Studio 15 2017 Win64"'
        BuildFolder: '$(Build.BinariesDirectory)\build'
        InstallFolder: '$(Build.BinariesDirectory)\install'
        Variant: '--build-debug'

      64-bit Release:
        BuildType: RelWithDebInfo
        CMakeArgs: '"Visual Studio 15 2017 Win64"'
        BuildFolder: '$(Build.BinariesDirectory)\build'
        InstallFolder: '$(Build.BinariesDirectory)\install'
        Variant: '--build-relwithdebug'

  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.7'
        addToPath: true
      displayName: Use python2.7!

    - script: python build.py $(Variant) --build-location $(BuildFolder) --generator $(CMakeArgs) $(InstallFolder)
      displayName: 'Run build script!'
      
    - script: 'ctest -j 4 --output-on-failure -C $(BuildType) -VV'
      workingDirectory: $(BuildFolder)
      displayName: 'Run ctest!'
    
    - task: CMake@1
      displayName: 'Run cpack and create a 7Z!'
      inputs:
        cmakeArgs: '-E chdir $(BuildFolder) cpack -C $(BuildType) -G 7Z'

    - task: CopyFiles@2
      displayName: 'Copy 7Z to artifact staging directory!'
      inputs:
        SourceFolder: '$(BuildFolder)/_CPack_Packages/win64/7Z/'
        Contents: '*.7z'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact!'
      inputs:
        artifactName: 'Windows-Artifact'
        parallel: true

- job: 
  displayName: MacOSX
  pool:
    vmImage: 'macOS-10.14'

  strategy:
    matrix:
      64-bit Debug:
        BuildType: Debug
        BuildFolder: '$(Build.BinariesDirectory)/build'
        InstallFolder: '$(Build.BinariesDirectory)/install'
        Variant: '--build-debug'

      64-bit Release:
        BuildType: RelWithDebInfo
        BuildFolder: '$(Build.BinariesDirectory)/build'
        InstallFolder: '$(Build.BinariesDirectory)/install'
        Variant: '--build-relwithdebug'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '2.7'
      addToPath: true 
    displayName: Use python2.7!

  - script: python build.py $(Variant) --build-location $(BuildFolder) $(InstallFolder)
    displayName: 'Run build script!'

  - script: 'ctest -j 4 --output-on-failure -C $(BuildType) -VV'
    workingDirectory: $(BuildFolder)
    displayName: 'Run ctest!'

  - task: CMake@1
    displayName: 'Run cpack and create a 7Z!'
    inputs:
      cmakeArgs: '-E chdir $(BuildFolder) cpack -C $(BuildType) -G 7Z'

  - task: CopyFiles@2
    displayName: 'Copy 7Z to artifact staging directory!'
    inputs:
      SourceFolder: '$(BuildFolder)/_CPack_Packages/Darwin/7Z/'
      Contents: '*.7z'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact!'
    inputs:
        artifactName: 'MacOSX-Artifact'
        parallel: true

- job:
  displayName: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      64-bit Debug:
        BuildType: Debug
        BuildFolder: '$(Build.BinariesDirectory)/build'
        InstallFolder: '$(Build.BinariesDirectory)/install'
        Variant: '--build-debug'

      64-bit Release:
        BuildType: Release
        BuildFolder: '$(Build.BinariesDirectory)/build'
        InstallFolder: '$(Build.BinariesDirectory)/install'
        Variant: '--build-relwithdebug'

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y build-essential libgtk-3-dev
      sudo apt-get install -y cmake clang xorg-dev libx11-dev libglu1-mesa-dev libglu1-mesa libglu1-mesa-dev libgl1-mesa-glx libgl1-mesa-dev uuid-dev gtk+3.0
    displayName: 'Install Build Dependencies - Ubuntu'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '2.7'
      addToPath: true 
    displayName: Use python2.7!

  - script: python build.py $(Variant) --build-location $(BuildFolder) $(InstallFolder)
    displayName: 'Run build script!'

  - script: 'ctest -j 4 --output-on-failure -C $(BuildType) -VV'
    workingDirectory: $(BuildFolder)
    displayName: 'Run ctest!'

  - task: CMake@1
    displayName: 'Run cpack and create a 7Z!'
    inputs:
      cmakeArgs: '-E chdir $(BuildFolder) cpack -C $(BuildType) -G 7Z'

  - task: CopyFiles@2
    displayName: 'Copy 7Z to artifact staging directory!'
    inputs:
      SourceFolder: '$(BuildFolder)/_CPack_Packages/Linux/7Z/'
      Contents: '*.7z'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
 
  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact!'
    inputs:
        artifactName: 'Debian-Artifact'
        parallel: true
